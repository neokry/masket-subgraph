// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Buyer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Buyer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Buyer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Buyer", id.toString(), this);
  }

  static load(id: string): Buyer | null {
    return store.get("Buyer", id) as Buyer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get purchases(): Array<string> | null {
    let value = this.get("purchases");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set purchases(value: Array<string> | null) {
    if (value === null) {
      this.unset("purchases");
    } else {
      this.set("purchases", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Seller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Seller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Seller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Seller", id.toString(), this);
  }

  static load(id: string): Seller | null {
    return store.get("Seller", id) as Seller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get products(): Array<string> | null {
    let value = this.get("products");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set products(value: Array<string> | null) {
    if (value === null) {
      this.unset("products");
    } else {
      this.set("products", Value.fromStringArray(value as Array<string>));
    }
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sales(value: Array<string> | null) {
    if (value === null) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Purchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Purchase entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Purchase entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Purchase", id.toString(), this);
  }

  static load(id: string): Purchase | null {
    return store.get("Purchase", id) as Purchase | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get product(): string {
    let value = this.get("product");
    return value.toString();
  }

  set product(value: string) {
    this.set("product", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }
}

export class Product extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Product entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Product entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Product", id.toString(), this);
  }

  static load(id: string): Product | null {
    return store.get("Product", id) as Product | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}
